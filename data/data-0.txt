Indicates if this BOM's bytes equals another
ByteOrderMark.length-ByteOrderMark.get
Return the hashcode for this BOM
Object.getClass-Object.hashCode
Provide a String representation of the BOM
StringBuilder.new-Object.getClass-Object.getSimpleName-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-Integer.toHexString-String.toUpperCase-StringBuilder.append-StringBuilder.append-StringBuilder.toString
Constructs a sorted map from canonical charset names to charset objects required of every implementation of the Java platform
TreeMap<String, Charset>.new-Charset.name-Charset.put-Charset.name-Charset.put-Charset.name-Charset.put-Charset.name-Charset.put-Charset.name-Charset.put-Charset.name-Charset.put-Collections.unmodifiableSortedMap
Returns the given Charset or the default Charset if the given Charset is null
Charset.defaultCharset
Returns a Charset for the named charset
Charset.forName-Charset.defaultCharset
Sort an array of files
Arrays.sort
Sort a List of files
Collections.sort
String representation of this file comparator
Object.getClass-Object.getSimpleName
Compare the two files using delegate comparators
File.compare
String representation of this file comparator
StringBuilder.new-AbstractFileComparator.toString-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.toString
Compare the two files using the  method
File.compareTo
Compare the two files using the  method
DirectoryFileComparator.getType-DirectoryFileComparator.getType
Convert type to numeric value
File.isDirectory
Compare the extensions of two files the specified case sensitivity
File.getName-FilenameUtils.getExtension-File.getName-FilenameUtils.getExtension-IOCase.checkCompareTo
String representation of this file comparator
AbstractFileComparator.toString
Compare the last the last modified date/time of two files
File.lastModified-File.lastModified
Compare the names of two files with the specified case sensitivity
File.getName-File.getName-IOCase.checkCompareTo
String representation of this file comparator
AbstractFileComparator.toString
Compare the paths of two files the specified case sensitivity
File.getPath-File.getPath-IOCase.checkCompareTo
String representation of this file comparator
AbstractFileComparator.toString
Compare using the delegate Comparator, but reversing the result
File.compare
String representation of this file comparator
AbstractFileComparator.toString-File.toString
Compare the length of two files
File.isDirectory-File.length-File.exists-FileUtils.sizeOfDirectory-File.isDirectory-File.length-File.exists-FileUtils.sizeOfDirectory
String representation of this file comparator
AbstractFileComparator.toString
Copy bytes from a byte[] to an OutputStream
OutputStream.write
Copy and convert bytes from a byte[] to chars on a Writer
ByteArrayInputStream.new-CopyUtils.copy
Copy and convert bytes from a byte[] to chars on a Writer, using the specified encoding
ByteArrayInputStream.new-CopyUtils.copy
Copy bytes from an InputStream to an OutputStream
InputStream.read-OutputStream.write
Copy chars from a Reader to a Writer
Reader.read-Writer.write
Copy and convert bytes from an InputStream to chars on a Writer
Charset.defaultCharset-InputStreamReader.new-CopyUtils.copy
Copy and convert bytes from an InputStream to chars on a Writer, using the specified encoding
InputStreamReader.new-CopyUtils.copy
Serialize chars from a Reader to bytes on an OutputStream, and flush the OutputStream
Charset.defaultCharset-OutputStreamWriter.new-CopyUtils.copy-OutputStreamWriter.flush
Serialize chars from a Reader to bytes on an OutputStream, and flush the OutputStream
OutputStreamWriter.new-CopyUtils.copy-OutputStreamWriter.flush
Serialize chars from a String to bytes on an OutputStream, and flush the OutputStream
StringReader.new-Charset.defaultCharset-OutputStreamWriter.new-CopyUtils.copy-OutputStreamWriter.flush
Serialize chars from a String to bytes on an OutputStream, and flush the OutputStream
StringReader.new-OutputStreamWriter.new-CopyUtils.copy-OutputStreamWriter.flush
Copy chars from a String to a Writer
Writer.write
Internal method that walks the directory hierarchy in a depth-first manner
NullPointerException.new-DirectoryWalker.handleCancelled-DirectoryWalker.handleStart-DirectoryWalker.walk-DirectoryWalker.handleEnd
Main recursive method to examine the directory hierarchy
DirectoryWalker.checkIfCancelled-DirectoryWalker.handleDirectory-DirectoryWalker.handleDirectoryStart-DirectoryWalker.checkIfCancelled-File.listFiles-File.listFiles-DirectoryWalker.filterDirectoryContents-File.isDirectory-DirectoryWalker.checkIfCancelled-DirectoryWalker.handleFile-DirectoryWalker.checkIfCancelled-DirectoryWalker.walk-DirectoryWalker.handleRestricted-DirectoryWalker.handleDirectoryEnd-DirectoryWalker.checkIfCancelled
Checks whether the walk has been cancelled by calling , throwing a CancelException if it has
DirectoryWalker.handleIsCancelled-CancelException.new
Converts a "float" value between endian systems
Float.floatToIntBits-EndianUtils.swapInteger-Float.intBitsToFloat
Converts a "double" value between endian systems
Double.doubleToLongBits-EndianUtils.swapLong-Double.longBitsToDouble
Reads a "long" value from a byte array at a given offset
EndianUtils.readSwappedInteger-EndianUtils.readSwappedInteger
Writes a "float" value to a byte array at a given offset
Float.floatToIntBits-EndianUtils.writeSwappedInteger
Reads a "float" value from a byte array at a given offset
EndianUtils.readSwappedInteger-Float.intBitsToFloat
Writes a "double" value to a byte array at a given offset
Double.doubleToLongBits-EndianUtils.writeSwappedLong
Reads a "double" value from a byte array at a given offset
EndianUtils.readSwappedLong-Double.longBitsToDouble
Writes a "short" value to an OutputStream
OutputStream.write-OutputStream.write
Reads a "short" value from an InputStream
EndianUtils.read-EndianUtils.read
Reads a unsigned short (16-bit) from an InputStream
EndianUtils.read-EndianUtils.read
Writes a "int" value to an OutputStream
OutputStream.write-OutputStream.write-OutputStream.write-OutputStream.write
Reads a "int" value from an InputStream
EndianUtils.read-EndianUtils.read-EndianUtils.read-EndianUtils.read
Reads a unsigned integer (32-bit) from an InputStream
EndianUtils.read-EndianUtils.read-EndianUtils.read-EndianUtils.read
Writes a "long" value to an OutputStream
OutputStream.write-OutputStream.write-OutputStream.write-OutputStream.write-OutputStream.write-OutputStream.write-OutputStream.write-OutputStream.write
Reads a "long" value from an InputStream
EndianUtils.read-EndianUtils.readSwappedLong
Writes a "float" value to an OutputStream
Float.floatToIntBits-EndianUtils.writeSwappedInteger
Reads a "float" value from an InputStream
EndianUtils.readSwappedInteger-Float.intBitsToFloat
Writes a "double" value to an OutputStream
Double.doubleToLongBits-EndianUtils.writeSwappedLong
Reads a "double" value from an InputStream
EndianUtils.readSwappedLong-Double.longBitsToDouble
Reads the next byte from the input stream
InputStream.read-EOFException.new
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
FileCleaningTracker.track
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
FileCleaningTracker.track
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
FileCleaningTracker.track
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
FileCleaningTracker.track
Retrieve the number of files currently being tracked, and therefore awaiting deletion
FileCleaningTracker.getTrackCount
Call this method to cause the file cleaner thread to terminate when there are no more objects being tracked for deletion
FileCleaningTracker.exitWhenFinished
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
FileCleaningTracker.track
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
NullPointerException.new-File.getPath-FileCleaningTracker.addTracker
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
FileCleaningTracker.track
Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected
NullPointerException.new-FileCleaningTracker.addTracker
Adds a tracker to the list of trackers
IllegalStateException.new-Reaper.new-Thread.start-Tracker.new-Tracker.add
Retrieve the number of files currently being tracked, and therefore awaiting deletion
Tracker.size
Call this method to cause the file cleaner thread to terminate when there are no more objects being tracked for deletion
Thread.interrupt
Run the reaper thread that will delete files as their associated marker objects are reclaimed by the garbage collector
Tracker.size-Object.remove-Tracker.remove-Tracker.delete-Tracker.getPath-String.add-Tracker.clear
Deletes the file associated with this tracker instance
File.new-FileDeleteStrategy.deleteQuietly
Deletes the file object, which may be a file or a directory
File.exists-FileDeleteStrategy.doDelete
Deletes the file object, which may be a file or a directory
File.exists-FileDeleteStrategy.doDelete-IOException.new
Actually deletes the file object, which may be a file or a directory
File.delete
Deletes the file object
FileUtils.forceDelete
Checks to see if the File should be accepted by this filter
File.getParentFile-File.getName-AbstractFileFilter.accept
Checks to see if the File should be accepted by this filter
File.new-AbstractFileFilter.accept
Provide a String representaion of this file filter
Object.getClass-Object.getSimpleName
Checks to see if the last modification of the file matches cutoff favorably
FileUtils.isFileNewer
Provide a String representaion of this file filter
AbstractFileFilter.toString
Provide a String representaion of this file filter
StringBuilder.new-AbstractFileFilter.toString-StringBuilder.append-StringBuilder.append-StringBuilder.append-IOFileFilter.get-Object.toString-StringBuilder.append-IOFileFilter.size-StringBuilder.append-StringBuilder.toString
Checks to see if the file can be read
File.canRead
Checks to see if the file can be written to
File.canWrite
Checks the filter
AbstractFileFilter.accept-FileFilter.accept
Checks the filter
AbstractFileFilter.accept-FilenameFilter.accept
Provide a String representaion of this file filter
FilenameFilter.toString-FileFilter.toString-AbstractFileFilter.toString
Checks to see if the file is a directory
File.isDirectory
Checks to see if the file is empty
File.isDirectory-File.length-File.listFiles
Checks to see if the file is a file
File.isFile
 Applies an  to the provided {@link File} objects
IllegalArgumentException.new-ArrayList<File>.new-IllegalArgumentException.new-IOFileFilter.accept-File.add-File.size-File.toArray
 Applies an  to the provided {@link File} objects
FileFilterUtils.filterList-File.size-File.toArray
 Applies an  to the provided {@link File} objects
ArrayList<File>.new-FileFilterUtils.filter
 Applies an  to the provided {@link File} objects
FileFilterUtils.filter-Arrays.asList
 Applies an  to the provided {@link File} objects
FileFilterUtils.filter-Arrays.asList-HashSet<File>.new
 Applies an  to the provided {@link File} objects
HashSet<File>.new-FileFilterUtils.filter
 Applies an  to the provided {@link File} objects and appends the accepted files to the other supplied collection
IllegalArgumentException.new-IllegalArgumentException.new-IOFileFilter.accept-T.add
Returns a filter that returns true if the filename starts with the specified text
PrefixFileFilter.new
Returns a filter that returns true if the filename starts with the specified text
PrefixFileFilter.new
Returns a filter that returns true if the filename ends with the specified text
SuffixFileFilter.new
Returns a filter that returns true if the filename ends with the specified text
SuffixFileFilter.new
Returns a filter that returns true if the filename matches the specified text
NameFileFilter.new
Returns a filter that returns true if the filename matches the specified text
NameFileFilter.new
Returns a filter that ANDs the two specified filters
AndFileFilter.new
Returns a filter that ORs the two specified filters
OrFileFilter.new
Returns a filter that ANDs the specified filters
FileFilterUtils.toList-AndFileFilter.new
Returns a filter that ORs the specified filters
FileFilterUtils.toList-OrFileFilter.new
Create a List of file filters
IllegalArgumentException.new-ArrayList<IOFileFilter>.new-IllegalArgumentException.new-IOFileFilter.add
Returns a filter that NOTs the specified filter
NotFileFilter.new
Returns an IOFileFilter that wraps the FileFilter instance
DelegateFileFilter.new
Returns an IOFileFilter that wraps the FilenameFilter instance
DelegateFileFilter.new
Returns a filter that returns true if the file was last modified after the specified cutoff time
AgeFileFilter.new
Returns a filter that filters files based on a cutoff time
AgeFileFilter.new
Returns a filter that returns true if the file was last modified after the specified cutoff date
AgeFileFilter.new
Returns a filter that filters files based on a cutoff date
AgeFileFilter.new
Returns a filter that returns true if the file was last modified after the specified reference file
AgeFileFilter.new
Returns a filter that filters files based on a cutoff reference file
AgeFileFilter.new
Returns a filter that returns true if the file is bigger than a certain size
SizeFileFilter.new
Returns a filter that filters based on file size
SizeFileFilter.new
Returns a filter that accepts files whose size is &gt;= minimum size and &lt;= maximum size
SizeFileFilter.new-SizeFileFilter.new-AndFileFilter.new
Returns a filter that accepts files that begin with the provided magic number
MagicNumberFileFilter.new
Returns a filter that accepts files that contains the provided magic number at a specified offset within the file
MagicNumberFileFilter.new
Returns a filter that accepts files that begin with the provided magic number
MagicNumberFileFilter.new
Returns a filter that accepts files that contains the provided magic number at a specified offset within the file
MagicNumberFileFilter.new
Decorates a filter to make it ignore CVS directories
FileFilterUtils.and
Decorates a filter to make it ignore SVN directories
FileFilterUtils.and
Decorates a filter so that it only applies to directories and not to files
AndFileFilter.new
Decorates a filter so that it only applies to files and not to directories
AndFileFilter.new
Checks to see if the file is hidden
File.isHidden
 Accepts the provided file if the file contains the file filter's magic number at the specified offset
File.isFile-File.canRead-IOUtils.closeQuietly-RandomAccessFile.new-RandomAccessFile.seek-RandomAccessFile.read-Arrays.equals
Returns a String representation of the file filter, which includes the magic number bytes and byte offset
AbstractFileFilter.toString-StringBuilder.new-StringBuilder.append-Charset.defaultCharset-String.new-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.toString
Checks to see if the filename matches
File.getName-IOCase.checkEquals
Checks to see if the filename matches
IOCase.checkEquals
Provide a String representaion of this file filter
StringBuilder.new-AbstractFileFilter.toString-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.toString
Returns the logical NOT of the underlying filter's return value for the same File
IOFileFilter.accept
Returns the logical NOT of the underlying filter's return value for the same arguments
IOFileFilter.accept
Provide a String representaion of this file filter
AbstractFileFilter.toString-IOFileFilter.toString
Provide a String representaion of this file filter
StringBuilder.new-AbstractFileFilter.toString-StringBuilder.append-StringBuilder.append-StringBuilder.append-IOFileFilter.get-Object.toString-StringBuilder.append-IOFileFilter.size-StringBuilder.append-StringBuilder.toString
Checks to see if the filename starts with the prefix
File.getName-IOCase.checkStartsWith
Checks to see if the filename starts with the prefix
IOCase.checkStartsWith
Provide a String representaion of this file filter
StringBuilder.new-AbstractFileFilter.toString-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.toString
Checks to see if the filename matches one of the regular expressions
Pattern.matcher-Matcher.matches
Checks to see if the size of the file is favorable
File.length
Provide a String representaion of this file filter
AbstractFileFilter.toString
Checks to see if the filename ends with the suffix
File.getName-IOCase.checkEndsWith
Checks to see if the filename ends with the suffix
IOCase.checkEndsWith
Provide a String representaion of this file filter
StringBuilder.new-AbstractFileFilter.toString-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.toString
Checks to see if the filename matches one of the wildcards
FilenameUtils.wildcardMatch
Checks to see if the filename matches one of the wildcards
File.getName-FilenameUtils.wildcardMatch
Provide a String representation of this file filter
StringBuilder.new-AbstractFileFilter.toString-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.append-StringBuilder.toString
Checks to see if the filename matches one of the wildcards
File.new-File.isDirectory-FilenameUtils.wildcardMatch
Checks to see if the filename matches one of the wildcards
File.isDirectory-File.getName-FilenameUtils.wildcardMatch
Normalizes a path, removing double and single dot path steps
FilenameUtils.doNormalize
Normalizes a path, removing double and single dot path steps
FilenameUtils.doNormalize
Normalizes a path, removing double and single dot path steps, and removing any final directory separator
FilenameUtils.doNormalize
Normalizes a path, removing double and single dot path steps, and removing any final directory separator
FilenameUtils.doNormalize
Internal method to perform the normalization
FilenameUtils.failIfNullBytePresent-String.length-FilenameUtils.getPrefixLength-String.length-String.getChars-System.arraycopy-System.arraycopy-System.arraycopy-System.arraycopy-String.new-String.new-String.new
Concatenates a filename to a base path using normal command line style rules
FilenameUtils.getPrefixLength-FilenameUtils.normalize-String.length-FilenameUtils.normalize-String.charAt-FilenameUtils.isSeparator-FilenameUtils.normalize-FilenameUtils.normalize
Determines whether the  directory contains the {@code child} element (a file or directory)
IllegalArgumentException.new-IOCase.checkEquals-IOCase.checkStartsWith
Converts all separators to the Unix separator of forward slash
String.indexOf-String.replace
Converts all separators to the Windows separator of backslash
String.indexOf-String.replace
Converts all separators to the system separator
FilenameUtils.isSystemWindows-FilenameUtils.separatorsToUnix-FilenameUtils.separatorsToWindows
Returns the length of the filename prefix, such as C:/ or ~/
String.length-String.charAt-String.indexOf-String.indexOf-Math.min-String.charAt-FilenameUtils.isSeparator-FilenameUtils.isSeparator-FilenameUtils.isSeparator-String.indexOf-String.indexOf-Math.min-Character.toUpperCase-String.charAt-FilenameUtils.isSeparator-FilenameUtils.isSeparator
Returns the index of the last directory separator character
String.lastIndexOf-String.lastIndexOf-Math.max
Returns the index of the last extension separator character, which is a dot
String.lastIndexOf-FilenameUtils.indexOfLastSeparator
Gets the prefix from a full filename, such as C:/ or ~/
FilenameUtils.getPrefixLength-String.length-FilenameUtils.failIfNullBytePresent-String.substring-FilenameUtils.failIfNullBytePresent
Gets the path from a full filename, which excludes the prefix
FilenameUtils.doGetPath
Gets the path from a full filename, which excludes the prefix, and also excluding the final directory separator
FilenameUtils.doGetPath
Does the work of getting the path
FilenameUtils.getPrefixLength-FilenameUtils.indexOfLastSeparator-String.length-String.substring-FilenameUtils.failIfNullBytePresent
Gets the full path from a full filename, which is the prefix + path
FilenameUtils.doGetFullPath
Gets the full path from a full filename, which is the prefix + path, and also excluding the final directory separator
FilenameUtils.doGetFullPath
Does the work of getting the path
FilenameUtils.getPrefixLength-String.length-FilenameUtils.getPrefix-FilenameUtils.indexOfLastSeparator-String.substring-String.substring
Gets the name minus the path from a full filename
FilenameUtils.failIfNullBytePresent-FilenameUtils.indexOfLastSeparator-String.substring
Check the input for null bytes, a sign of unsanitized data being passed to to file level functions
String.length-String.charAt-IllegalArgumentException.new
Gets the base name, minus the full path and extension, from a full filename
FilenameUtils.getName-FilenameUtils.removeExtension
Gets the extension of a filename
FilenameUtils.indexOfExtension-String.substring
Removes the extension from a filename
FilenameUtils.failIfNullBytePresent-FilenameUtils.indexOfExtension-String.substring
Checks whether two filenames are equal exactly
FilenameUtils.equals
Checks whether two filenames are equal using the case rules of the system
FilenameUtils.equals
Checks whether two filenames are equal after both have been normalized
FilenameUtils.equals
Checks whether two filenames are equal after both have been normalized and using the case rules of the system
FilenameUtils.equals
Checks whether two filenames are equal, optionally normalizing and providing control over the case-sensitivity
FilenameUtils.normalize-FilenameUtils.normalize-NullPointerException.new-IOCase.checkEquals
Checks whether the extension of the filename is that specified
FilenameUtils.failIfNullBytePresent-String.isEmpty-FilenameUtils.indexOfExtension-FilenameUtils.getExtension-String.equals
Checks whether the extension of the filename is one of those specified
FilenameUtils.failIfNullBytePresent-FilenameUtils.indexOfExtension-FilenameUtils.getExtension-String.equals
Checks whether the extension of the filename is one of those specified
FilenameUtils.failIfNullBytePresent-String.isEmpty-FilenameUtils.indexOfExtension-FilenameUtils.getExtension-String.equals
Checks a filename to see if it matches the specified wildcard matcher, always testing case-sensitive
FilenameUtils.wildcardMatch
Checks a filename to see if it matches the specified wildcard matcher using the case rules of the system
FilenameUtils.wildcardMatch
Checks a filename to see if it matches the specified wildcard matcher allowing control over case-sensitivity
FilenameUtils.splitOnTokens-Stack<int[]>.new-Stack<int[].size-Stack<int[].pop-String.equals-String.equals-IOCase.checkRegionMatches-IOCase.checkIndexOf-IOCase.checkIndexOf-Stack<int[].push-String.length-String.length-String.length-String.length-Stack<int[].size
Splits a string into a number of tokens
String.indexOf-String.indexOf-String.toCharArray-ArrayList<String>.new-StringBuilder.new-StringBuilder.append-StringBuilder.length-StringBuilder.toString-String.add-StringBuilder.setLength-String.add-String.add-StringBuilder.length-StringBuilder.toString-String.add-String.size-String.toArray
Returns the free space on a drive or volume by invoking the command line
FileSystemUtils.freeSpaceOS
Returns the free space on a drive or volume in kilobytes by invoking the command line
FileSystemUtils.freeSpaceKb
Returns the free space on a drive or volume in kilobytes by invoking the command line
FileSystemUtils.freeSpaceOS
Returns the disk size of the volume which holds the working directory
FileSystemUtils.freeSpaceKb
Returns the disk size of the volume which holds the working directory
File.new-File.getAbsolutePath-FileSystemUtils.freeSpaceKb
Returns the free space on a drive or volume in a cross-platform manner
IllegalArgumentException.new-FileSystemUtils.freeSpaceWindows-FileSystemUtils.freeSpaceWindows-FileSystemUtils.freeSpaceUnix-FileSystemUtils.freeSpaceUnix-IllegalStateException.new-IllegalStateException.new
Find free space on the Windows platform using the 'dir' command
FilenameUtils.normalize-String.length-String.charAt-FileSystemUtils.performCommand-String.size-String.get-String.length-FileSystemUtils.parseDir-IOException.new
Find free space on the *nix platform using the 'df' command
