{
  "data": [
    {"seq" : "Copies bytes from a large InputStream to an OutputStream.",
     "ann" : "InputStream.read-OutputStream.write"
    },
    {"seq": "Compares the contents of two Streams to determine if they are equal or not.",
     "ann": "BufferedInputSream.new-BufferedInputeStream.new-BufferedInputSTream.read-BufferedInputStream.read-BufferedInputStream.read"
    },
    {"seq": "Compares the contents of two Readers to determine if they are equal or not.",
     "ann": "BufferedReader.new-BufferedReader.new-BufferedReader.read-BufferedReader.read-BufferedReader.read"
    },
    {"seq":"Compares the contents of two Readers to determine if they are equal or not, ignoring EOL characters.",
     "ann":"BufferedReader.new-BufferedReader.new-BufferedReader.readLine-BufferedReader.readLine-BufferedReader.equals-BufferedReader.readLine-BufferedReader.readLine-BufferedReader.equals"
    },
    {"seq":"Skips bytes from an input byte stream.",
     "ann":"byte[].new-Math.min-InputStream.read"
    },
    {"seq":"Skips bytes from a ReadableByteChannel.",
     "ann":"Math.min-ByteBuffer.allocate-ByteBuffer.position-Math.min-ByteBuffer.limitr-ReadableByteChannel-read"
    },
    {"seq":"Skips characters from an input character stream.",
     "ann":"char[].new-Math.min-Reader.read"
    },
    {"seq":"Reads characters from an input character stream.",
     "ann":"Reader.read"
    },
    {"seq":"Reads bytes from an input stream.",
     "ann":"InputStream.read"
    },
    {"seq":"Closes a Closeable unconditionally.",
     "ann":"Closeable.close"
    }
  ]
}
